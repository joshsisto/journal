#!/usr/bin/env python3
"""
Comprehensive test runner for preventing guided journal issues.

This script runs all tests that would catch the types of issues we just fixed:
- End-to-end browser tests
- Security validation tests  
- CSP/JavaScript tests
- Form functionality tests
"""
import subprocess
import sys
import os
from pathlib import Path


def run_command(cmd, description, critical=True):
    """Run a command and handle the result."""
    print(f"üîç {description}...")
    
    try:
        result = subprocess.run(
            cmd, shell=True, capture_output=True, text=True, timeout=300
        )
        
        if result.returncode == 0:
            print(f"‚úÖ {description} passed!")
            return True
        else:
            print(f"‚ùå {description} failed!")
            if result.stdout:
                print("STDOUT:", result.stdout)
            if result.stderr:
                print("STDERR:", result.stderr)
            
            if critical:
                return False
            else:
                print("‚ö†Ô∏è  Non-critical failure, continuing...")
                return True
                
    except subprocess.TimeoutExpired:
        print(f"‚è∞ {description} timed out!")
        return False
    except Exception as e:
        print(f"üí• {description} crashed: {e}")
        return False


def main():
    """Run comprehensive tests."""
    print("üöÄ Running Comprehensive Test Suite")
    print("=" * 50)
    print("This test suite prevents guided journal issues like:")
    print("  - JavaScript/CSP blocking")
    print("  - Security false positives")
    print("  - Form submission failures")
    print("  - UI component malfunctions")
    print("")
    
    # Change to project directory
    os.chdir(Path(__file__).parent)
    
    failures = 0
    
    # 1. Basic unit tests
    if not run_command(
        "python3 run_tests.py quick", 
        "Running basic unit tests"
    ):
        failures += 1
    
    # 2. Security validation tests
    if not run_command(
        "python3 -m pytest tests/unit/test_security_validation.py -v",
        "Testing security validation (prevents false positives)"
    ):
        failures += 1
    
    # 3. CSP/JavaScript tests  
    if not run_command(
        "python3 -m pytest tests/unit/test_csp_javascript.py -v",
        "Testing CSP nonces and JavaScript structure"
    ):
        failures += 1
    
    # 4. CSRF validation
    if not run_command(
        "python3 validate_csrf.py",
        "Validating CSRF tokens in templates"
    ):
        failures += 1
    
    # 5. End-to-end tests (if Selenium is available)
    selenium_available = run_command(
        "python3 -c 'import selenium; print(\"Selenium available\")'",
        "Checking if Selenium is available",
        critical=False
    )
    
    if selenium_available:
        if not run_command(
            "python3 -m pytest tests/functional/test_guided_journal_e2e.py -v",
            "Running end-to-end browser tests",
            critical=False  # Browser tests can be flaky
        ):
            print("‚ö†Ô∏è  Browser tests failed (non-critical)")
    else:
        print("‚ÑπÔ∏è  Skipping browser tests (Selenium not available)")
    
    # 6. Template validation
    if not run_command(
        "python3 -c \"import subprocess; subprocess.run(['hooks/pre-commit-comprehensive'], check=True)\"",
        "Running comprehensive template validation"
    ):
        failures += 1
    
    # 7. Integration test - simulate form submission
    if not run_command(
        "python3 -m pytest tests/unit/test_journal_entries.py::TestGuidedJournalEntries::test_create_guided_entry_with_emotions_json -v",
        "Testing guided journal form submission with emotions"
    ):
        failures += 1
    
    print("")
    print("=" * 50)
    
    if failures == 0:
        print("üéâ ALL TESTS PASSED!")
        print("‚úÖ The codebase is protected against guided journal issues")
        print("")
        print("Tests successfully validate:")
        print("  ‚úÖ JavaScript executes despite CSP")
        print("  ‚úÖ Emotion data doesn't trigger security blocks")
        print("  ‚úÖ Form submissions work properly")
        print("  ‚úÖ CSRF tokens are properly implemented")
        print("  ‚úÖ UI components function correctly")
        return 0
    else:
        print(f"‚ùå {failures} TEST CATEGORIES FAILED!")
        print("")
        print("üõ†Ô∏è  To fix issues:")
        print("  1. Check error messages above")
        print("  2. Run individual test categories for details")
        print("  3. Use pre-commit hook: cp hooks/pre-commit-comprehensive .git/hooks/pre-commit")
        print("  4. Review CLAUDE.md for testing guidelines")
        return 1


if __name__ == "__main__":
    sys.exit(main())